{"version":3,"sources":["store/reducers/ActionCreators.ts","store/reducers/UserSlice.ts","store/reducers/PostSlice.ts","store/reducers/CommentsSlice.ts","store/index.ts","hooks/hooks.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","fetchUsers","createAsyncThunk","_","thunkAPI","a","url","fetch","response","json","rejectWithValue","fetchPosts","userId","axios","get","data","removePost","postId","delete","fetchCommentsByPostId","removeCommentById","commentId","addComment","newComment","headers","post","initialState","users","areUsersLoading","errorLoadingUsers","count","selectedUserId","undefined","userSlice","createSlice","name","reducers","setSelectedUserId","state","action","payload","extraReducers","fulfilled","type","pending","rejected","postSlice","posts","arePostsLoading","errorLoadingPosts","selectedPostId","setSelectedPostId","commentSlice","comments","areCommentsLoading","errorLoadingComments","areCommentVisible","setCommentVisible","rootReducer","combineReducers","userReducer","postReducer","commentReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","Loader","className","PostsList","dispatch","actions","useEffect","onRemovePost","length","map","title","id","onClick","NewCommentForm","initialComment","email","body","useState","comment","setComment","handleInputChange","event","target","value","handleFormSubmit","preventDefault","onSubmit","method","onChange","placeholder","PostDetails","find","singlePost","onRemoveComment","App","htmlFor","toString","Number","user","store","configureStore","reducer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2e8d6c4.chunk.js","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const fetchUsers = createAsyncThunk(\n  'user/fetchAll',\n  async (_, thunkAPI) => {\n    try {\n      const url = `${BASE_URL}/users`;\n      const response = await fetch(url);\n\n      return (await response.json()) as User[];\n    } catch (error) {\n      return thunkAPI.rejectWithValue(`Some problem with fetching users with ${error}`);\n    }\n  },\n);\n\nexport const fetchPosts = createAsyncThunk(\n  'post/fetch',\n  async (userId: number | undefined, thunkAPI) => {\n    try {\n      let url = `${BASE_URL}/posts`;\n\n      if (userId) {\n        url += `?userId=${userId}`;\n      }\n\n      const response = await axios.get<Post[]>(url);\n\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  },\n);\n\nexport const removePost = createAsyncThunk(\n  'post/remove',\n  async (postId: number, thunkAPI) => {\n    try {\n      const url = `${BASE_URL}/posts/${postId}`;\n\n      const response = await axios.delete(url);\n\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(`Some problem with fetching posts with ${error}`);\n    }\n  },\n);\n\nexport const fetchCommentsByPostId = createAsyncThunk(\n  'comments/fetch',\n  async (postId: number, thunkAPI) => {\n    try {\n      const url = `${BASE_URL}/comments?postId=${postId}`;\n\n      const response = await axios.get<Comment>(url);\n\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(`Some problem with fetching comments with ${error}`);\n    }\n  },\n);\n\nexport const removeCommentById = createAsyncThunk(\n  'comment/remove',\n  async (commentId: number, thunkAPI) => {\n    try {\n      const url = `${BASE_URL}/comments/${commentId}`;\n\n      const response = await axios.delete(url);\n\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(`Some problem with removing comment with ${error}`);\n    }\n  },\n);\n\nexport const addComment = createAsyncThunk(\n  'comment/add',\n  async (newComment: NewComment, thunkAPI) => {\n    try {\n      const url = `${BASE_URL}/comments`;\n      const headers = {\n        'Content-type': 'application/json; charset=utf-8',\n      };\n\n      const response = await axios.post(url, newComment, { headers });\n\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(`Some problem with adding new comment with ${error}`);\n    }\n  },\n);\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit';\nimport { fetchUsers } from './ActionCreators';\n\nexport interface UserState {\n  users: User[];\n  areUsersLoading: boolean;\n  errorLoadingUsers: string;\n  count: number;\n  selectedUserId: number | undefined;\n}\n\nconst initialState: UserState = {\n  users: [],\n  areUsersLoading: false,\n  errorLoadingUsers: '',\n  count: 0,\n  selectedUserId: undefined,\n};\n\nexport const userSlice: Slice<UserState> = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setSelectedUserId(state, action: PayloadAction<number>) {\n      state.selectedUserId = action.payload;\n    },\n  },\n  extraReducers: {\n    [fetchUsers.fulfilled.type]: (state, action: PayloadAction<User[]>) => {\n      state.areUsersLoading = false;\n      state.errorLoadingUsers = '';\n      state.users = action.payload;\n    },\n    [fetchUsers.pending.type]: (state) => {\n      state.areUsersLoading = true;\n    },\n    [fetchUsers.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.areUsersLoading = false;\n      state.errorLoadingUsers = action.payload;\n    },\n  },\n});\n\nexport default userSlice.reducer;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit';\nimport { fetchPosts, removePost } from './ActionCreators';\n\nexport interface PostState {\n  posts: Post[];\n  arePostsLoading: boolean;\n  errorLoadingPosts: string;\n  selectedPostId: number | null;\n}\n\nconst initialState: PostState = {\n  posts: [],\n  arePostsLoading: false,\n  errorLoadingPosts: '',\n  selectedPostId: null,\n};\n\nexport const postSlice: Slice<PostState> = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    setSelectedPostId(state, action: PayloadAction<number>) {\n      state.selectedPostId = action.payload;\n    },\n  },\n  extraReducers: {\n    [fetchPosts.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.arePostsLoading = false;\n      state.errorLoadingPosts = action.payload;\n    },\n    [fetchPosts.pending.type]: (state) => {\n      state.arePostsLoading = true;\n    },\n    [fetchPosts.fulfilled.type]: (state, action: PayloadAction<Post[]>) => {\n      state.arePostsLoading = false;\n      state.errorLoadingPosts = '';\n      state.posts = action.payload;\n    },\n\n    [removePost.pending.type]: (state) => {\n      state.arePostsLoading = true;\n    },\n    [removePost.fulfilled.type]: (state) => {\n      state.arePostsLoading = false;\n      state.errorLoadingPosts = '';\n    },\n    [removePost.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.arePostsLoading = false;\n      state.errorLoadingPosts = action.payload;\n    },\n  },\n});\n\nexport default postSlice.reducer;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit';\nimport { fetchCommentsByPostId, removeCommentById, addComment } from './ActionCreators';\n\nexport interface CommentState {\n  comments: PostComment[];\n  areCommentsLoading: boolean;\n  errorLoadingComments: string;\n  areCommentVisible: boolean;\n}\n\nconst initialState: CommentState = {\n  comments: [],\n  areCommentsLoading: false,\n  errorLoadingComments: '',\n  areCommentVisible: true,\n};\n\nexport const commentSlice: Slice<CommentState> = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    setCommentVisible(state, action: PayloadAction<boolean>) {\n      state.areCommentVisible = action.payload;\n    },\n  },\n  extraReducers: {\n    [fetchCommentsByPostId.pending.type]: (state) => {\n      state.areCommentsLoading = true;\n    },\n    [fetchCommentsByPostId.fulfilled.type]: (state, action: PayloadAction<PostComment[]>) => {\n      state.areCommentsLoading = false;\n      state.errorLoadingComments = '';\n      state.comments = action.payload;\n    },\n    [fetchCommentsByPostId.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.areCommentsLoading = false;\n      state.errorLoadingComments = action.payload;\n    },\n\n    [removeCommentById.pending.type]: (state) => {\n      state.areCommentsLoading = true;\n    },\n    [removeCommentById.fulfilled.type]: (state) => {\n      state.areCommentsLoading = false;\n      state.errorLoadingComments = '';\n    },\n    [removeCommentById.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.areCommentsLoading = false;\n      state.errorLoadingComments = action.payload;\n    },\n\n    [addComment.pending.type]: (state) => {\n      state.areCommentsLoading = true;\n    },\n    [addComment.fulfilled.type]: (state) => {\n      state.areCommentsLoading = false;\n      state.errorLoadingComments = '';\n    },\n    [addComment.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.areCommentsLoading = false;\n      state.errorLoadingComments = action.payload;\n    },\n  },\n});\n\nexport default commentSlice.reducer;\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport userReducer from './reducers/UserSlice';\nimport postReducer from './reducers/PostSlice';\nimport commentReducer from './reducers/CommentsSlice';\n\nconst rootReducer = combineReducers({\n  userReducer,\n  postReducer,\n  commentReducer,\n});\n\nexport const setupStore = () => {\n  return configureStore({\n    reducer: rootReducer,\n  });\n};\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore['dispatch'];\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport { useAppSelector, useAppDispatch } from '../../hooks/hooks';\nimport { fetchPosts, removePost } from '../../store/reducers/ActionCreators';\nimport { postSlice } from '../../store/reducers/PostSlice';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\nexport const PostsList: React.FC = () => {\n  const { selectedUserId } = useAppSelector(state => state.userReducer);\n  const {\n    posts,\n    selectedPostId,\n    arePostsLoading,\n    errorLoadingPosts,\n  } = useAppSelector(state => state.postReducer);\n  const dispatch = useAppDispatch();\n  const { setSelectedPostId } = postSlice.actions;\n\n  useEffect(() => {\n    dispatch(fetchPosts(selectedUserId));\n  }, [selectedUserId]);\n\n  const onRemovePost = async (postId: number) => {\n    await dispatch(removePost(postId));\n    await dispatch(fetchPosts(selectedUserId));\n  };\n\n  if (arePostsLoading) {\n    return <Loader />;\n  }\n\n  if (errorLoadingPosts) {\n    return <h2>{errorLoadingPosts}</h2>;\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.length === 0 ? <h3>No posts of chosen user</h3> : (\n          <>\n            {posts.map(post => (\n              <li key={post.id} className=\"PostsList__item\">\n                <div>\n                  <b>\n                    {`[User #${post.userId}]: `}\n                  </b>\n                  {post.title}\n                </div>\n                <div>\n                  {\n                    selectedPostId === post.id\n                      ? (\n                        <button\n                          onClick={() => dispatch(setSelectedPostId(null))}\n                          type=\"button\"\n                          className=\"PostsList__button button\"\n                        >\n                          Close\n                        </button>\n                      )\n                      : (\n                        <button\n                          onClick={() => dispatch(setSelectedPostId(post.id))}\n                          type=\"button\"\n                          className=\"PostsList__button button\"\n                        >\n                          Open\n                        </button>\n                      )\n                  }\n                  <button\n                    onClick={() => onRemovePost(post.id)}\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                  >\n                    Remove\n                  </button>\n                </div>\n              </li>\n            ))}\n          </>\n        )}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { addComment, fetchCommentsByPostId } from '../../store/reducers/ActionCreators';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => {\n  const { selectedPostId } = useAppSelector(state => state.postReducer);\n  const dispatch = useAppDispatch();\n\n  const initialComment = {\n    postId: selectedPostId as number,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [comment, setComment] = useState<NewComment>(initialComment);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    setComment({\n      ...comment,\n      [event.target.name]: event.target.value,\n\n    });\n  };\n\n  const handleFormSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    await dispatch(addComment(comment));\n    if (selectedPostId) {\n      await dispatch(fetchCommentsByPostId(selectedPostId));\n    }\n\n    setComment(initialComment);\n  };\n\n  return (\n    <form\n      onSubmit={handleFormSubmit}\n      className=\"NewCommentForm\"\n      method=\"post\"\n    >\n      <div className=\"form-field\">\n        <input\n          onChange={handleInputChange}\n          value={comment.name}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          onChange={handleInputChange}\n          value={comment.email}\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          onChange={handleInputChange}\n          value={comment.body}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './PostDetails.scss';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { fetchCommentsByPostId, removeCommentById } from '../../store/reducers/ActionCreators';\nimport { Loader } from '../Loader';\nimport { commentSlice } from '../../store/reducers/CommentsSlice';\nimport { NewCommentForm } from '../NewCommentForm';\n\nexport const PostDetails: React.FC = () => {\n  const { posts, selectedPostId } = useAppSelector(state => state.postReducer);\n  const {\n    comments,\n    areCommentsLoading,\n    areCommentVisible,\n    errorLoadingComments,\n  } = useAppSelector(state => state.commentReducer);\n  const post = posts.find(singlePost => singlePost.id === selectedPostId);\n  const dispatch = useAppDispatch();\n  const { setCommentVisible } = commentSlice.actions;\n\n  useEffect(() => {\n    if (selectedPostId) {\n      dispatch(fetchCommentsByPostId(selectedPostId));\n    }\n  }, [selectedPostId]);\n\n  const onRemoveComment = async (commentId: number, postId: number) => {\n    await dispatch(removeCommentById(commentId));\n    await dispatch(fetchCommentsByPostId(postId));\n  };\n\n  if (post) {\n    return (\n      <div className=\"PostDetails\">\n        <h2>\n          {`Post details: ${post.title}`}\n        </h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{post.title}</p>\n          <p>{post.body}</p>\n        </section>\n\n        {errorLoadingComments}\n\n        {areCommentsLoading ? <Loader /> : (\n          <section className=\"PostDetails__comments\">\n            {areCommentVisible && comments.length > 0\n              ? (\n                <button\n                  onClick={() => dispatch(setCommentVisible(false))}\n                  type=\"button\"\n                  className=\"button\"\n                >\n                  {`Hide ${comments.length} comments`}\n                </button>\n              )\n              : (\n                <button\n                  onClick={() => dispatch(setCommentVisible(true))}\n                  type=\"button\"\n                  className=\"button\"\n                >\n                  {comments.length > 0 ? `Show ${comments.length} comments` : 'No comments'}\n                </button>\n              )}\n\n            { areCommentVisible && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li key={comment.id} className=\"PostDetails__list-item\">\n                    <button\n                      onClick={() => onRemoveComment(comment.id, post.id)}\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        )}\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm />\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  return <h2>Any post is not selected yet</h2>;\n};\n","import { useEffect } from 'react';\nimport { useAppSelector, useAppDispatch } from './hooks/hooks';\nimport { userSlice } from './store/reducers/UserSlice';\nimport { fetchUsers } from './store/reducers/ActionCreators';\nimport { Loader } from './components/Loader';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const { users, areUsersLoading, selectedUserId } = useAppSelector(state => state.userReducer);\n  const dispatch = useAppDispatch();\n  const { setSelectedUserId } = userSlice.actions;\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        {areUsersLoading\n          ? (<Loader />)\n          : (\n            <label htmlFor=\"select-user\">\n              Select a user: &nbsp;\n              <select\n                value={selectedUserId?.toString()}\n                onChange={event => dispatch(setSelectedUserId(Number(event.target.value)))}\n                className=\"App__user-selector\"\n                id=\"select-user\"\n              >\n                <option value={undefined}>All users</option>\n                {users.map(user => (\n                  <option\n                    key={user.id}\n                    value={user.id}\n                  >\n                    {user.name}\n                  </option>\n                ))}\n              </select>\n            </label>\n          )}\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { setupStore } from './store';\nimport App from './App';\n\nconst store = setupStore();\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}